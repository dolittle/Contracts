// Copyright (c) Dolittle. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

syntax = "proto3";

import "Fundamentals/Protobuf/Uuid.proto";
import "Fundamentals/Protobuf/Failure.proto";
import "Runtime/Events.Processing/Projections.proto";
import "Runtime/Management/Events.Processing/StreamProcessors.proto";

package dolittle.runtime.events.processing.management;

option csharp_namespace = "Dolittle.Runtime.Events.Processing.Management.Contracts";
option go_package = "go.dolittle.io/contracts/runtime/events/processing/management";

message ReplayProjectionRequest {
    // TODO: Do we want another kind of execution context here?
    protobuf.Uuid scopeId = 1;
    protobuf.Uuid projectionId = 2;
    optional protobuf.Uuid tenantId = 3;
}

message ReplayProjectionResponse {
    protobuf.Failure failure = 1; // not set if not failed
}

message GetAllProjectionsRequest {
    // TODO: Do we want another kind of execution context here?
    optional protobuf.Uuid tenantId = 1;
}

message ProjectionStatus {
    protobuf.Uuid scopeId = 1;
    protobuf.Uuid projectionId = 2;
    repeated ProjectionEventSelector events = 4;
    string initialState = 5;
    ProjectionCopies copies = 6;
    string alias = 7;
    repeated TenantScopedStreamProcessorStatus tenants = 8;
}

message GetAllProjectionsResponse {
    protobuf.Failure failure = 1; // not set if not failed
    repeated ProjectionStatus projections = 2;
}

message GetOneProjectionRequest {
    // TODO: Do we want another kind of execution context here?
    protobuf.Uuid scopeId = 1;
    protobuf.Uuid projectionId = 2;
    optional protobuf.Uuid tenantId = 3;
}

message GetOneProjectionResponse {
    protobuf.Failure failure = 1; // not set if not failed
    ProjectionStatus projection = 2;
}

service Projections {
    rpc Replay(ReplayProjectionRequest) returns(ReplayProjectionResponse);
    rpc GetAll(GetAllProjectionsRequest) returns(GetAllProjectionsResponse);
    rpc GetOne(GetOneProjectionRequest) returns(GetOneProjectionResponse);
}