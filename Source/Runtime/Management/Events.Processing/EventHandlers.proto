// Copyright (c) Dolittle. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

syntax = "proto3";

import "Fundamentals/Artifacts/Artifact.proto";
import "Fundamentals/Protobuf/Uuid.proto";
import "Fundamentals/Protobuf/Failure.proto";
import "Fundamentals/Services/ReverseCallContext.proto";
import "Fundamentals/Services/Ping.proto";
import "Runtime/Events.Processing/StreamEvent.proto";
import "Runtime/Events.Processing/Processors.proto";

package dolittle.runtime.events.processing.management;

option csharp_namespace = "Dolittle.Runtime.Events.Processing.Management.Contracts";
option go_package = "go.dolittle.io/contracts/runtime/events/processing/management";

message ReprocessEventsFromRequest {
    // TODO: Do we want another kind of execution context here?
    protobuf.Uuid tenantId = 1;
    protobuf.Uuid scopeId = 2;
    protobuf.Uuid eventHandlerId = 3;
    uint64 streamPosition = 4;
}

message ReprocessEventsFromResponse {
    protobuf.Failure failure = 1; // not set if not failed
}

message ReprocessAllEventsRequest {
    // TODO: Do we want another kind of execution context here?
    protobuf.Uuid scopeId = 1;
    protobuf.Uuid eventHandlerId = 2;
}

message ReprocessAllEventsResponse {
    protobuf.Failure failure = 1; // not set if not failed
}

message GetAllRequest {
    // TODO: Do we want another kind of execution context here?
}

message EventHandlerStatus {
    protobuf.Uuid scopeId = 1;
    protobuf.Uuid eventHandlerId = 2;
    repeated artifacts.Artifact eventTypes = 3;
    bool partitioned = 4;
    optional string alias = 5;
    repeated TenantScopedEventHandlerStatus tenants = 6;
}

message GetAllResponse {
    protobuf.Failure failure = 1; // not set if not failed
    repeated EventHandlerStatus eventHandlers = 2;
}

service EventHandlers {
    rpc ReprocessEventsFrom(ReprocessEventsFromRequest) returns(ReprocessEventsFromResponse);
    rpc ReprocessAllEvents(ReprocessAllEventsRequest) returns(ReprocessAllEventsResponse);
    rpc GetAll(GetAllRequest) returns(GetAllResponse);
}