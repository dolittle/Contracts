// Copyright (c) Dolittle. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

syntax = "proto3";

import "Artifacts/Artifact.proto";
import "Execution/ExecutionContext.proto";
import "Protobuf/Failure.proto";
import "Protobuf/Uuid.proto";
import "Services/ReverseCallContext.proto";
import "Services/Ping.proto";
import "Runtime/EventHorizon/Subscriptions.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

package dolittle.runtime.eventhorizon;

option csharp_namespace = "Dolittle.Runtime.EventHorizon.Contracts";
option go_package = "go.dolittle.io/contracts/runtime/eventhorizon";


message EventHorizonCommittedEvent {
    uint64 eventLogSequenceNumber = 1; 
    google.protobuf.Timestamp occurred = 2;
    protobuf.Uuid eventSourceIdLegacy = 3 [deprecated = true];
    google.protobuf.StringValue eventSourceId = 11;
    execution.ExecutionContext executionContext = 4;
    artifacts.Artifact eventType = 5;
    bool public = 6;
    string content = 7;
    bool external = 8;
    uint64 externalEventLogSequenceNumber = 9;
    google.protobuf.Timestamp externalEventReceived = 10;
}

message EventHorizonEvent {
    uint64 streamSequenceNumber = 1;
    EventHorizonCommittedEvent event = 2; 
}

message ConsumerSubscriptionRequest {
    services.ReverseCallArgumentsContext callContext = 1;
    protobuf.Uuid tenantId = 2;
    protobuf.Uuid streamId = 3;
    protobuf.Uuid partitionIdLegacy = 4 [deprecated = true];
    google.protobuf.StringValue partitionId = 6;
    uint64 streamPosition = 5;
    bool sendBatches = 6;
}

message ConsumerResponse {
    services.ReverseCallResponseContext callContext = 1;
    protobuf.Failure failure = 2; // If not set/empty - no failure
}

message EventHorizonConsumerToProducerMessage {
    oneof Message {
        ConsumerSubscriptionRequest subscriptionRequest = 1;
        ConsumerResponse response = 2;
        services.Pong pong = 3;
    }
}
message ConsumerRequest {
    services.ReverseCallRequestContext callContext = 1;
    EventHorizonEvent event = 2; // One of, can be null
    repeated EventHorizonEvent events = 3; // One of, can be null
}

message EventHorizonProducerToConsumerMessage {
    oneof Message {
        SubscriptionResponse subscriptionResponse = 1;
        ConsumerRequest request = 2;
        services.Ping ping = 3;
    }
}

service Consumer {
    rpc Subscribe(stream EventHorizonConsumerToProducerMessage) returns(stream EventHorizonProducerToConsumerMessage);
}
