// Copyright (c) Dolittle. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

syntax = "proto3";

import "Fundamentals/Protobuf/Failure.proto";
import "Fundamentals/Protobuf/Uuid.proto";
import "Fundamentals/Services/ReverseCallContext.proto";
import "Fundamentals/Services/Ping.proto";
import "Runtime/EventHorizon/Subscriptions.proto";
import "Runtime/Events/Committed.proto";

package dolittle.runtime.eventhorizon;

option csharp_namespace = "Dolittle.Runtime.EventHorizon.Contracts";
option go_package = "go.dolittle.io/contracts/runtime/eventhorizon";

message EventHorizonEvent {
    uint64 streamSequenceNumber = 1;
    events.CommittedEvent event = 2; 
}

message ConsumerSubscriptionRequest {
    services.ReverseCallArgumentsContext callContext = 1;
    protobuf.Uuid tenantId = 2;
    protobuf.Uuid streamId = 3;
    string partitionId = 4;
    uint64 streamPosition = 5;
}

message ConsumerResponse {
    services.ReverseCallResponseContext callContext = 1;
    protobuf.Failure failure = 2; // If not set/empty - no failure
}

message EventHorizonConsumerToProducerMessage {
    oneof Message {
        ConsumerSubscriptionRequest subscriptionRequest = 1;
        ConsumerResponse response = 2;
        services.Pong pong = 3;
    }
}
message ConsumerRequest {
    services.ReverseCallRequestContext callContext = 1;
    EventHorizonEvent event = 2;
}

message EventHorizonProducerToConsumerMessage {
    oneof Message {
        SubscriptionResponse subscriptionResponse = 1;
        ConsumerRequest request = 2;
        services.Ping ping = 3;
    }
}

service Consumer {
    rpc Subscribe(stream EventHorizonConsumerToProducerMessage) returns(stream EventHorizonProducerToConsumerMessage);
}
