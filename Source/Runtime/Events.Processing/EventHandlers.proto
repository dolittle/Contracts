// Copyright (c) Dolittle. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

syntax = "proto3";

import "Artifacts/Artifact.proto";
import "Protobuf/Uuid.proto";
import "Protobuf/Failure.proto";
import "Services/ReverseCallContext.proto";
import "Services/Ping.proto";
import "Runtime/Events.Processing/StreamEvent.proto";
import "Runtime/Events.Processing/Processors.proto";

package dolittle.runtime.events.processing;

option csharp_namespace = "Dolittle.Runtime.Events.Processing.Contracts";
option go_package = "go.dolittle.io/contracts/runtime/events/processing";

message EventHandlerRegistrationRequest {
    services.ReverseCallArgumentsContext callContext = 1;
    protobuf.Uuid scopeId = 2;
    protobuf.Uuid eventHandlerId = 3;
    repeated artifacts.Artifact eventTypes = 4;
    bool partitioned = 5;
    optional string alias = 6;
    bool batched = 7; // Whether the processor is batched or not
}

message EventHandlerResponse {
    services.ReverseCallResponseContext callContext = 1;
    ProcessorFailure failure = 2; // If not set/empty - no failure
}

message EventHandlerClientToRuntimeMessage {
    oneof Message {
        EventHandlerRegistrationRequest registrationRequest = 1;
        EventHandlerResponse handleResult = 2;
        services.Pong pong = 3;
    }
}

message EventHandlerRegistrationResponse {
    protobuf.Failure failure = 1;
}

message HandleEventRequest {
    services.ReverseCallRequestContext callContext = 1;
    StreamEvent event = 2;
    RetryProcessingState retryProcessingState = 3;
}

message HandleEventBatchRequest {
    services.ReverseCallRequestContext callContext = 1;
    repeated StreamEvent events = 2;
    RetryProcessingState retryProcessingState = 3;
}

message EventHandlerRuntimeToClientMessage {
    oneof Message {
        EventHandlerRegistrationResponse registrationResponse = 1;
        HandleEventRequest handleRequest = 2 [deprecated = true]; // Replaced by handleBatchRequest
        services.Ping ping = 3;
        HandleEventBatchRequest handleBatchRequest = 4;
    }
}

service EventHandlers {
    rpc Connect(stream EventHandlerClientToRuntimeMessage) returns(stream EventHandlerRuntimeToClientMessage);
}
